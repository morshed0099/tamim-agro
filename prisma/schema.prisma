// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Brance {
  id                String              @id @default(uuid())
  locationName      String              @unique
  type              BranceType
  branceCode        String              @unique
  customer          Customer[]
  emplyee           Emplyee[]
  branceWithEmplyee BranceWithEmplyee[]
}

model Customer {
  id         String   @id @default(uuid())
  brancCode  String
  customerId String   @unique
  Brance     Brance   @relation(fields: [brancCode], references: [branceCode])
  name       String
  Farmtype   Custtype
  totalShed  Int
  totalSqure Int
  capacity   Int
  nid        String
  Address    Address?
}

model Address {
  id          String    @id @default(uuid())
  village     String
  post        String
  union       String?
  thana       String?
  upazila     String
  phoneNumber String
  city        String
  emplyeId    String?   @unique
  customerId  String?   @unique
  emplyee     Emplyee?  @relation(fields: [emplyeId], references: [empleeId])
  customer    Customer? @relation(fields: [customerId], references: [customerId])
}

model BranceWithEmplyee {
  id         String  @id @default(uuid())
  emplyeeId  String
  branceCode String
  brance     Brance  @relation(fields: [branceCode], references: [branceCode])
  emplyee    Emplyee @relation(fields: [emplyeeId], references: [empleeId])
}

model Emplyee {
  id                String              @id @default(ulid())
  empleeId          String              @unique
  name              String
  workingLocation   String
  designation       String
  branceId          String?
  Brance            Brance?             @relation(fields: [branceId], references: [id])
  BranceWithEmplyee BranceWithEmplyee[]
  Address           Address?
  Flock             Flock[]
}

model Flock {
  id             String      @id @default(uuid())
  flockStatus    FlockStatus @default(Pending)
  startDate      String
  endDate        String
  executive      String
  emplyee        Emplyee     @relation(fields: [executive], references: [empleeId])
  docName        Int         @default(0)
  docQuantity    Int         @default(0)
  approvedBy     String
  branceCode     String      @unique
  totalFeedKg    Int         @default(0)
  totalmedicine  Int         @default(0)
  fcr            Int         @default(0)
  totalsellBirds Int         @default(0)
}

enum Custtype {
  Broiler
  Color
}

enum BranceType {
  HeadOffice
  BranceOffice
  BoguraOffice
}

enum FlockStatus {
  Pending
  Running
  Close
}
