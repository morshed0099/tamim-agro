// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Refactored Prisma Schema for Poultry Management System

enum FlockStatus {
  PENDING
  RUNNING
  CLOSED
}

enum Custtype {
  Broiler
  Color
}

enum BranchType {
  HeadOffice
  BranchOffice
  BoguraOffice
}

model Branch {
  id              String           @id @default(uuid())
  locationName    String           @unique
  type            BranchType
  branchCode      String           @unique
  farmer          Farmer[]
  employees       Employee[]
  branchEmployees BranchEmployee[]
  flocks          Flock[]

  Feed             Feed[]
  MedicineStock    MedicineStock[]
  MedicinePurchess MedicinePurchess[]
  SellMedicine     SellMedicine[]
  MedicineTransfer MedicineTransfer[]

  @@map("branch")
}

model Farmer {
  id           String         @id @default(uuid())
  branchCode   String?
  farmCode     Int
  branch       Branch?        @relation(fields: [branchCode], references: [branchCode])
  name         String
  farmType     Custtype
  totalShed    Int
  totalSquare  Int
  phoneNumber  String
  capacity     Int
  addressId    String?        @unique
  nid          String
  address      Address?       @relation(fields: [addressId], references: [id])
  flocks       Flock[]
  SellMedicine SellMedicine[]

  @@unique([branchCode, farmCode])
  @@index([farmCode])
  @@map("farmer")
}

model Address {
  id       String    @id @default(uuid())
  village  String
  post     String
  union    String?
  thana    String?
  upazila  String
  city     String
  Farmer   Farmer?
  Employee Employee?

  @@map("address")
}

model BranchEmployee {
  id         String   @id @default(uuid())
  employeeId String
  branchCode String
  branch     Branch   @relation(fields: [branchCode], references: [branchCode])
  employee   Employee @relation(fields: [employeeId], references: [employeeId])

  @@unique([employeeId, branchCode])
  @@map("branchEmployee")
}

model Employee {
  id              String           @id @default(ulid())
  employeeId      String           @unique
  name            String
  workingLocation String
  designation     String
  branchCode      String
  phoneNumber     String
  addressId       String?          @unique
  branch          Branch           @relation(fields: [branchCode], references: [branchCode])
  branchEmployees BranchEmployee[]
  address         Address?         @relation(fields: [addressId], references: [id])
  flocks          Flock[]

  @@map("employee")
}

model Flock {
  id               String             @id @default(uuid())
  flockNumber      Int                @unique
  flockStatus      FlockStatus        @default(PENDING)
  startDate        DateTime
  endDate          DateTime?
  executiveId      String
  farmId           String
  docName          String
  docQuantity      Int                @default(0)
  approvedBy       String?
  branchCode       String
  totalFeedKg      Int                @default(0)
  totalMedicine    Int                @default(0)
  fcr              Float              @default(0)
  totalSellBirds   Int                @default(0)
  mortality        Int                @default(0)
  farmer           Farmer             @relation(fields: [farmId], references: [id])
  employee         Employee           @relation(fields: [executiveId], references: [employeeId])
  branch           Branch             @relation(fields: [branchCode], references: [branchCode])
  SellMedicine     SellMedicine[]
  MedicineTransfer MedicineTransfer[]

  @@map("flock")
}

model FeedNameCategory {
  id             String @id @default(uuid())
  feedName       String @unique
  feedCodeNumber Int    @unique
  feeds          Feed[]

  @@map("feedNameCategory")
}

model Feed {
  id               String           @id @default(uuid())
  feedName         String
  feedNameCategory FeedNameCategory @relation(fields: [feedName], references: [feedName])
  stock            Int
  branchCode       String?
  branch           Branch?          @relation(fields: [branchCode], references: [branchCode])

  @@map("feed")
}

model MedicineNameCategory {
  id          String @id @default(uuid())
  genericName String @unique

  medicineNameAdd  MedicineNameAdd[]
  MedicineStock    MedicineStock[]
  MedicinePurchess MedicinePurchess[]

  @@map("medicineNameCategoy")
}

model MedicineNameAdd {
  id               String               @id @default(uuid())
  name             String               @unique
  conpany          String
  genericName      String
  medicineCategory MedicineNameCategory @relation(fields: [genericName], references: [genericName])

  MedicineStock    MedicineStock[]
  MedicinePurchess MedicinePurchess[]

  @@map("medicineNameAdd")
}

model MedicinePurchess {
  id                 String               @id @default(uuid())
  genericName        String
  medicineCategory   MedicineNameCategory @relation(fields: [genericName], references: [genericName])
  name               String
  medicineNameAdd    MedicineNameAdd      @relation(fields: [name], references: [name])
  purchaseUnitPrice  Int
  sellUnitPrice      Int
  purchaseQuantity   Int
  mfgDate            String
  expDate            String
  bonusQuantity      Int?
  purchaseTotalPrice Int
  supplierInfo       String
  branchCode         String
  branch             Branch               @relation(fields: [branchCode], references: [branchCode])

  @@map("medicinePurchess")
}

model MedicineStock {
  id               String               @id @default(uuid())
  genericName      String               @unique
  medicineName     String               @unique
  medicineNameAdd  MedicineNameAdd      @relation(fields: [medicineName], references: [name])
  medicineCategory MedicineNameCategory @relation(fields: [genericName], references: [genericName])
  branchCode       String
  branch           Branch               @relation(fields: [branchCode], references: [branchCode])
  totalStock       Int
  price            Int

  @@unique([genericName, medicineName])
  @@map("medicineStock")
}

model SellMedicine {
  id               String             @id @default(uuid())
  farmId           String
  flockNumer       Int
  genericName      String
  medicineName     String
  sellQuantity     Int
  sellPrice        Int
  Delivery         DeliveryStatus     @default(DELIVER)
  sellDate         String
  branchCode       String
  flock            Flock              @relation(fields: [flockNumer], references: [flockNumber], onDelete: Cascade)
  branch           Branch             @relation(fields: [branchCode], references: [branchCode], onDelete: Cascade)
  farmer           Farmer             @relation(fields: [farmId], references: [id], onDelete: Cascade)
  MedicineTransfer MedicineTransfer[]
}

model MedicineTransfer {
  id           String       @id @default(uuid())
  sellId       String
  sellmedicine SellMedicine @relation(fields: [sellId], references: [id])
  flockId      String
  flock        Flock        @relation(fields: [flockId], references: [id])
  toFarmcode   String?
  fromBranch   String?
  toBranch     String?
  medicineName String
  genericName  String
  branchCode   String
  baranch      Branch       @relation(fields: [branchCode], references: [branchCode])
}

enum DeliveryStatus {
  RETURN
  TRANSFER
  DELIVER
}
