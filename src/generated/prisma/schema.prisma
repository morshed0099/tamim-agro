// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Refactored Prisma Schema for Poultry Management System

enum FlockStatus {
  PENDING
  RUNNING
  CLOSED
}

enum Custtype {
  Broiler
  Color
}

enum BranchType {
  HeadOffice
  BranchOffice
  BoguraOffice
}

model Branch {
  id                    String                  @id @default(uuid())
  locationName          String                  @unique
  type                  BranchType
  branchCode            String                  @unique
  farmer                Farmer[]
  flocks                Flock[]
  feed                  Feed[]
  medicineStock         MedicineStock[]
  medicinePurchess      MedicinePurchess[]
  sellMedicine          SellMedicine[]
  medicineTransfer      MedicineTransfer[]
  flockReport           FlockReport[]
  branchEmployeeHistory BranchEmployeeHistory[]

  createdAt DateTime
  updatedAt DateTime @default(now())

  @@map("branch")
}

model Farmer {
  id           String         @id @default(uuid())
  branchCode   String?
  farmCode     Int
  branch       Branch?        @relation(fields: [branchCode], references: [branchCode])
  name         String
  farmType     Custtype
  totalShed    Int
  totalSquare  Int
  phoneNumber  String
  capacity     Int
  addressId    String?        @unique
  nid          String
  address      Address?       @relation(fields: [addressId], references: [id])
  flocks       Flock[]
  sellMedicine SellMedicine[]
  flockReport  FlockReport[]
  createdAt    DateTime
  updatedAt    DateTime       @default(now())

  @@unique([branchCode, farmCode])
  @@index([farmCode])
  @@map("farmer")
}

model Address {
  id        String    @id @default(uuid())
  village   String
  post      String
  union     String?
  thana     String?
  upazila   String
  city      String
  Farmer    Farmer?
  Employee  Employee?
  createdAt DateTime
  updatedAt DateTime  @default(now())

  @@map("address")
}

model BranchEmployeeHistory {
  id         String    @id @default(uuid())
  employeeId String
  startDate  DateTime  @default(now())
  endDate    DateTime?
  isActive   Boolean   @default(true)
  branchCode String
  branch     Branch    @relation(fields: [branchCode], references: [branchCode])
  employee   Employee  @relation(fields: [employeeId], references: [employeeId])
  createdAt  DateTime
  updatedAt  DateTime  @default(now())

  @@map("branchEmployee")
}

//When employee transfer any other brance then have change to table "BranchEmployeeHistory"->branceCode and also  table  

model Employee {
  id              String  @id @default(ulid())
  employeeId      String  @unique
  name            String
  workingLocation String
  designation     String
  phoneNumber     String
  addressId       String? @unique

  address               Address?                @relation(fields: [addressId], references: [id])
  flocks                Flock[]
  branchEmployeeHistory BranchEmployeeHistory[]
  branchId              String?
  createdAt             DateTime
  updatedAt             DateTime                @default(now())

  @@map("employee")
}

model Flock {
  id               String             @id @default(uuid())
  flockNumber      Int                @unique
  flockStatus      FlockStatus        @default(PENDING)
  startDate        DateTime
  endDate          DateTime?
  executiveId      String
  farmId           String
  docName          String
  docQuantity      Int                @default(0)
  approvedBy       String?
  branchCode       String
  totalFeedKg      Int                @default(0)
  totalMedicine    Int                @default(0)
  fcr              Float              @default(0)
  totalSellBirds   Int                @default(0)
  mortality        Int                @default(0)
  farmer           Farmer             @relation(fields: [farmId], references: [id])
  employee         Employee           @relation(fields: [executiveId], references: [employeeId])
  branch           Branch             @relation(fields: [branchCode], references: [branchCode])
  sellMedicine     SellMedicine[]
  medicineTransfer MedicineTransfer[]
  flockReport      FlockReport[]

  createdAt DateTime
  updatedAt DateTime @default(now())

  @@map("flock")
}

model FlockReport {
  id                       String   @id @default(uuid())
  housedBirds              Int
  fcr                      Float?
  executiveId              String
  totalMortality           Int?
  todayMortality           Int
  todayMortalityPercent    Float?
  totalMortalityPercentage Float?
  bodyWeight               Float
  todayWeightGain          Int
  todayFeedEting           Int
  suggestTosell            Boolean  @default(false)
  averageBodyWight         Int?
  totalFeedEting           Int
  feedStock                Int
  diseases                 String
  birdsStock               Int
  condition                String
  description              String
  executiveName            String
  flockNumber              String
  age                      Int
  imagesOne                String?
  imageTwo                 String?
  imageThree               String?
  visitedDate              DateTime @default(now())
  locationLink             String
  farmId                   String
  flockId                  String
  birdsSalesStart          Boolean  @default(false)
  birdsSalesEnd            Boolean  @default(false)
  branchCode               String
  branch                   Branch   @relation(fields: [branchCode], references: [branchCode])
  flock                    Flock    @relation(fields: [flockId], references: [id])
  farmer                   Farmer   @relation(fields: [farmId], references: [id])
  createdAt                DateTime
  updatedAt                DateTime @default(now())

  @@map("flockReport")
}

model FeedNameCategory {
  id             String   @id @default(uuid())
  feedName       String   @unique
  feedCodeNumber Int      @unique
  feeds          Feed[]
  createdAt      DateTime
  updatedAt      DateTime @default(now())

  @@map("feedNameCategory")
}

model Feed {
  id               String           @id @default(uuid())
  feedName         String
  feedNameCategory FeedNameCategory @relation(fields: [feedName], references: [feedName])
  stock            Int
  branchCode       String?
  branch           Branch?          @relation(fields: [branchCode], references: [branchCode])
  createdAt        DateTime
  updatedAt        DateTime         @default(now())

  @@map("feed")
}

model AllGenericMedicin {
  id          String @id @default(uuid())
  genericName String @unique

  medicineNameAdd  MedicineNameAdd[]
  medicineStock    MedicineStock[]
  medicinePurchess MedicinePurchess[]
  createdAt        DateTime
  updatedAt        DateTime           @default(now())

  @@map("medicineNameCategoy")
}

model MedicineNameAdd {
  id               String            @id @default(uuid())
  name             String            @unique
  conpany          String
  genericName      String
  medicineCategory AllGenericMedicin @relation(fields: [genericName], references: [genericName])

  medicineStock    MedicineStock[]
  medicinePurchess MedicinePurchess[]
  createdAt        DateTime
  updatedAt        DateTime           @default(now())

  @@map("medicineNameAdd")
}

model MedicinePurchess {
  id                 String            @id @default(uuid())
  genericName        String
  medicineCategory   AllGenericMedicin @relation(fields: [genericName], references: [genericName])
  name               String
  medicineNameAdd    MedicineNameAdd   @relation(fields: [name], references: [name])
  purchaseUnitPrice  Int
  sellUnitPrice      Int
  purchaseQuantity   Int
  mfgDate            String
  expDate            String
  bonusQuantity      Int?
  purchaseTotalPrice Int
  supplierInfo       String
  stored             Stored            @default(FACTORY)
  branchCode         String
  branch             Branch            @relation(fields: [branchCode], references: [branchCode])
  createdAt          DateTime
  updatedAt          DateTime          @default(now())

  @@map("medicinePurchess")
}

model MedicineStock {
  id               String            @id @default(uuid())
  genericName      String            @unique
  medicineName     String            @unique
  medicineNameAdd  MedicineNameAdd   @relation(fields: [medicineName], references: [name])
  medicineCategory AllGenericMedicin @relation(fields: [genericName], references: [genericName])
  branchCode       String
  branch           Branch            @relation(fields: [branchCode], references: [branchCode])
  totalStock       Int
  price            Int
  createdAt        DateTime
  updatedAt        DateTime          @default(now())

  @@unique([genericName, medicineName])
  @@map("medicineStock")
}

model SellMedicine {
  id               String             @id @default(uuid())
  farmId           String
  flockNumer       Int
  genericName      String
  medicineName     String
  sellQuantity     Int
  sellPrice        Int
  Delivery         DeliveryStatus     @default(DELIVER)
  sellDate         String
  branchCode       String
  flock            Flock              @relation(fields: [flockNumer], references: [flockNumber], onDelete: Cascade)
  branch           Branch             @relation(fields: [branchCode], references: [branchCode], onDelete: Cascade)
  farmer           Farmer             @relation(fields: [farmId], references: [id], onDelete: Cascade)
  MedicineTransfer MedicineTransfer[]
  createdAt        DateTime
  updatedAt        DateTime           @default(now())

  @@map("sellMedicine")
}

model MedicineTransfer {
  id           String       @id @default(uuid())
  sellId       String
  sellmedicine SellMedicine @relation(fields: [sellId], references: [id])
  flockId      String
  flock        Flock        @relation(fields: [flockId], references: [id])
  toFarmcode   String?
  fromBranch   String?
  toBranch     String?
  medicineName String
  genericName  String
  branchCode   String
  baranch      Branch       @relation(fields: [branchCode], references: [branchCode])
  createdAt    DateTime
  updatedAt    DateTime     @default(now())

  @@map("medicineTransfer")
}

enum Stored {
  FACTORY
  DEPOT
}

enum DeliveryStatus {
  RETURN
  TRANSFER
  DELIVER
}
