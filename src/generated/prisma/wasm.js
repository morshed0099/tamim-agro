
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.8.2
 * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
 */
Prisma.prismaVersion = {
  client: "6.8.2",
  engine: "2060c79ba17c6bb9f5823312b6f6b7f4a845738e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.BranchScalarFieldEnum = {
  id: 'id',
  locationName: 'locationName',
  type: 'type',
  branchCode: 'branchCode'
};

exports.Prisma.FarmerScalarFieldEnum = {
  id: 'id',
  branchCode: 'branchCode',
  farmCode: 'farmCode',
  name: 'name',
  farmType: 'farmType',
  totalShed: 'totalShed',
  totalSquare: 'totalSquare',
  phoneNumber: 'phoneNumber',
  capacity: 'capacity',
  addressId: 'addressId',
  nid: 'nid'
};

exports.Prisma.AddressScalarFieldEnum = {
  id: 'id',
  village: 'village',
  post: 'post',
  union: 'union',
  thana: 'thana',
  upazila: 'upazila',
  city: 'city'
};

exports.Prisma.BranchEmployeeScalarFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  branchCode: 'branchCode'
};

exports.Prisma.EmployeeScalarFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  name: 'name',
  workingLocation: 'workingLocation',
  designation: 'designation',
  branchCode: 'branchCode',
  phoneNumber: 'phoneNumber',
  addressId: 'addressId'
};

exports.Prisma.FlockScalarFieldEnum = {
  id: 'id',
  flockNumber: 'flockNumber',
  flockStatus: 'flockStatus',
  startDate: 'startDate',
  endDate: 'endDate',
  executiveId: 'executiveId',
  farmId: 'farmId',
  docName: 'docName',
  docQuantity: 'docQuantity',
  approvedBy: 'approvedBy',
  branchCode: 'branchCode',
  totalFeedKg: 'totalFeedKg',
  totalMedicine: 'totalMedicine',
  fcr: 'fcr',
  totalSellBirds: 'totalSellBirds',
  mortality: 'mortality'
};

exports.Prisma.FeedNameCategoryScalarFieldEnum = {
  id: 'id',
  feedName: 'feedName',
  feedCodeNumber: 'feedCodeNumber'
};

exports.Prisma.FeedScalarFieldEnum = {
  id: 'id',
  feedName: 'feedName',
  stock: 'stock',
  branchCode: 'branchCode'
};

exports.Prisma.MedicineNameCategoryScalarFieldEnum = {
  id: 'id',
  genericName: 'genericName'
};

exports.Prisma.MedicineNameAddScalarFieldEnum = {
  id: 'id',
  name: 'name',
  conpany: 'conpany',
  genericName: 'genericName'
};

exports.Prisma.MedicinePurchessScalarFieldEnum = {
  id: 'id',
  genericName: 'genericName',
  name: 'name',
  purchaseUnitPrice: 'purchaseUnitPrice',
  sellUnitPrice: 'sellUnitPrice',
  purchaseQuantity: 'purchaseQuantity',
  mfgDate: 'mfgDate',
  expDate: 'expDate',
  bonusQuantity: 'bonusQuantity',
  purchaseTotalPrice: 'purchaseTotalPrice',
  supplierInfo: 'supplierInfo',
  branchCode: 'branchCode'
};

exports.Prisma.MedicineStockScalarFieldEnum = {
  id: 'id',
  genericName: 'genericName',
  medicineName: 'medicineName',
  branchCode: 'branchCode',
  totalStock: 'totalStock',
  price: 'price'
};

exports.Prisma.SellMedicineScalarFieldEnum = {
  id: 'id',
  farmId: 'farmId',
  flockNumer: 'flockNumer',
  genericName: 'genericName',
  medicineName: 'medicineName',
  sellQuantity: 'sellQuantity',
  sellPrice: 'sellPrice',
  Delivery: 'Delivery',
  sellDate: 'sellDate',
  branchCode: 'branchCode'
};

exports.Prisma.MedicineTransferScalarFieldEnum = {
  id: 'id',
  sellId: 'sellId',
  flockId: 'flockId',
  toFarmcode: 'toFarmcode',
  fromBranch: 'fromBranch',
  toBranch: 'toBranch',
  medicineName: 'medicineName',
  genericName: 'genericName',
  branchCode: 'branchCode'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.BranchType = exports.$Enums.BranchType = {
  HeadOffice: 'HeadOffice',
  BranchOffice: 'BranchOffice',
  BoguraOffice: 'BoguraOffice'
};

exports.Custtype = exports.$Enums.Custtype = {
  Broiler: 'Broiler',
  Color: 'Color'
};

exports.FlockStatus = exports.$Enums.FlockStatus = {
  PENDING: 'PENDING',
  RUNNING: 'RUNNING',
  CLOSED: 'CLOSED'
};

exports.DeliveryStatus = exports.$Enums.DeliveryStatus = {
  RETURN: 'RETURN',
  TRANSFER: 'TRANSFER',
  DELIVER: 'DELIVER'
};

exports.Prisma.ModelName = {
  Branch: 'Branch',
  Farmer: 'Farmer',
  Address: 'Address',
  BranchEmployee: 'BranchEmployee',
  Employee: 'Employee',
  Flock: 'Flock',
  FeedNameCategory: 'FeedNameCategory',
  Feed: 'Feed',
  MedicineNameCategory: 'MedicineNameCategory',
  MedicineNameAdd: 'MedicineNameAdd',
  MedicinePurchess: 'MedicinePurchess',
  MedicineStock: 'MedicineStock',
  SellMedicine: 'SellMedicine',
  MedicineTransfer: 'MedicineTransfer'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
